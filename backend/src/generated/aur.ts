/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/rpc/v5/search/{arg}": {
        parameters: {
            query?: {
                /** @description The ***by*** parameter let's you define the field that is used in the search query. If not defined, ***name-desc*** is used.
                 *     For ***name*** and ***name-desc*** a *contains*-like lookup is performed whereas all other fields require an exact value.
                 *      */
                by?: components["parameters"]["SearchBy"];
            };
            header?: never;
            path: {
                /** @description Provide your search-term in the ***{arg}*** parameter.
                 *      */
                arg: components["parameters"]["TermPath"];
            };
            cookie?: never;
        };
        /**
         * Single-term search
         * @description ### Search for packages with a single term returning basic package information
         *
         */
        get: {
            parameters: {
                query?: {
                    /** @description The ***by*** parameter let's you define the field that is used in the search query. If not defined, ***name-desc*** is used.
                     *     For ***name*** and ***name-desc*** a *contains*-like lookup is performed whereas all other fields require an exact value.
                     *      */
                    by?: components["parameters"]["SearchBy"];
                };
                header?: never;
                path: {
                    /** @description Provide your search-term in the ***{arg}*** parameter.
                     *      */
                    arg: components["parameters"]["TermPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Search result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SearchResult"];
                    };
                };
                /** @description Error response */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResult"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rpc/v5/info/{arg}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Single package lookup
         * @description ### Get detailed information for a single package
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Provide a package name in the ***{arg}*** parameter.
                     *      */
                    arg: components["parameters"]["Pkgname"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Info result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InfoResult"];
                    };
                };
                /** @description Error response */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResult"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rpc/v5/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Multi package lookup
         * @description ### Get detailed information for multiple packages
         *
         */
        get: {
            parameters: {
                query: {
                    /** @description Provide one or more package names in the ***{arg[]}*** parameter.
                     *      */
                    "arg[]": components["parameters"]["Pkgnames"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Info result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InfoResult"];
                    };
                };
                /** @description Error response */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResult"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Multi package lookup
         * @description ### Get detailed information for multiple packages
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["InfoBody"];
            responses: {
                /** @description Info result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InfoResult"];
                    };
                };
                /** @description Error response */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResult"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rpc/v5/suggest/{arg}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Package name search (starts-with)
         * @description ### Returns a list of package-names starting with {arg}
         *     #### *(max 20 results)*
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Provide your search-term in the ***{arg}*** parameter.
                     *      */
                    arg: components["parameters"]["TermPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Suggest results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PackageNames"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rpc/v5/suggest-pkgbase/{arg}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Package base search (starts-with)
         * @description ### Returns a list of package-base-names starting with {arg}
         *     #### *(max 20 results)*
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Provide your search-term in the ***{arg}*** parameter.
                     *      */
                    arg: components["parameters"]["TermPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Suggest results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PackageNames"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        PackageNames: string[];
        /** @description SearchResult contains a list of basic package information */
        SearchResult: components["schemas"]["BaseResult"] & {
            results?: components["schemas"]["PackageBasic"][];
        };
        /** @description InfoResult contains a list of detailed package information */
        InfoResult: components["schemas"]["BaseResult"] & {
            results?: components["schemas"]["PackageDetailed"][];
        };
        /** @description Detailed package information */
        PackageDetailed: components["schemas"]["PackageBasic"] & {
            Submitter?: string;
            /** @description From PKGBUILD `license` */
            License?: string[];
            /** @description From PKGBUILD `depends` */
            Depends?: string[];
            /** @description From PKGBUILD `makedepends` */
            MakeDepends?: string[];
            /** @description From PKGBUILD `optdepends` */
            OptDepends?: string[];
            /** @description From PKGBUILD `checkdepends` */
            CheckDepends?: string[];
            /** @description From PKGBUILD `provides` */
            Provides?: string[];
            /** @description From PKGBUILD `conflicts` */
            Conflicts?: string[];
            /** @description From PKGBUILD `replaces` */
            Replaces?: string[];
            /** @description From PKGBUILD `groups` */
            Groups?: string[];
            /** @description From PKGBUILD `keywords` */
            Keywords?: string[];
            CoMaintainers?: string[];
        };
        /** @description Basic package information */
        PackageBasic: {
            ID?: number;
            /** @description From PKGBUILD `pkgname` */
            Name?: string;
            /** @description From PKGBUILD `pkgdesc` */
            Description?: string | null;
            PackageBaseID?: number;
            PackageBase?: string;
            Maintainer?: string | null;
            NumVotes?: number;
            Popularity?: number;
            /** @description UNIX timestamp */
            FirstSubmitted?: number;
            /** @description UNIX timestamp */
            LastModified?: number;
            /** @description UNIX timestamp, or null if not flagged */
            OutOfDate?: string | null;
            /** @description From PKGBUILD `pkgver`-`pkgrel` */
            Version?: string;
            /** @description Path to gzipped snapshot */
            URLPath?: string | null;
            /** @description From PKGBUILD `url` */
            URL?: string | null;
        };
        ErrorResult: components["schemas"]["BaseResult"] & {
            /** @description Error message */
            error?: string;
            /** @default [] */
            results: Record<string, never>[];
        };
        BaseResult: {
            /** @description Number of search results */
            resultcount?: number;
            /** @description Type of API call */
            type?: string;
            /** @description API Version */
            version?: number;
        };
    };
    responses: never;
    parameters: {
        /** @description The ***by*** parameter let's you define the field that is used in the search query. If not defined, ***name-desc*** is used.
         *     For ***name*** and ***name-desc*** a *contains*-like lookup is performed whereas all other fields require an exact value.
         *      */
        SearchBy: "name" | "name-desc" | "depends" | "checkdepends" | "optdepends" | "makedepends" | "maintainer" | "submitter" | "provides" | "conflicts" | "replaces" | "keywords" | "groups" | "comaintainers";
        /** @description Provide your search-term in the ***{arg}*** parameter.
         *      */
        Term: string;
        /** @description Provide your search-term in the ***{arg}*** parameter.
         *      */
        TermPath: string;
        /** @description Provide a package name in the ***{arg}*** parameter.
         *      */
        Pkgname: string;
        /** @description Provide one or more package names in the ***{arg[]}*** parameter.
         *      */
        Pkgnames: string[];
    };
    requestBodies: {
        SearchBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Provide your search-term in the ***{arg}*** parameter.
                     *      */
                    arg: string;
                    /**
                     * @description The ***by*** parameter let's you define the field that is used in the search query. If not defined, ***name-desc*** is used.
                     *     For ***name*** and ***name-desc*** a *contains*-like lookup is performed whereas all other fields require an exact value.
                     *
                     * @default name-desc
                     * @enum {string}
                     */
                    by: "name" | "name-desc" | "depends" | "checkdepends" | "optdepends" | "makedepends" | "maintainer" | "submitter" | "provides" | "conflicts" | "replaces" | "keywords" | "groups" | "comaintainers";
                };
            };
        };
        InfoBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Provide one or more package names in the ***{arg[]}*** parameter.
                     *      */
                    "arg[]": string[];
                };
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
